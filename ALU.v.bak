module ALU(
    input [31:0]Y;, [31:0]BusMuxOut, [4:0]ALU;
    output [63:0]Z;
    integer i;
);
    reg [31:0]A;
    reg [31:0]B;
    reg [63:0]C;
    integer i;

    wire [31:0]Mulout;
    wire [63:0]Divout;

    NonRestoringDivisionAlgorithim div(Dividend,M,Divout)
    multiplier mul(A,B,Mulout)

    always @ (ALU) begin
       A = Y;
       B = BusMuxOut;

       // ALU switch case for the specific operations
       case (ALU)
            5'b00000: C = A + B; // Additon
            5'b00001: C = A - B; // Subtraction
            5'b00010: C = {Mulout} // Multiplication
            5'b00011: C = {Divout} // Division
            5'b00100: C = A >> B; // Shift Right
            5'b00101: C = A >>> B; // Shift Right Arithmetic
            5'b00110: C = A << B; // Shift Left
            5'b00111: C = A >>> B; // Rotate Right
            5'b01000: C = A >>> B; // Rotate Left
            5'b01001: C = A & B; // Logical AND
            5'b01010: C = A | B; // Logical OR
            5'b01011: C = -A; // Negate
            5'b01100: C = ~A; // NOT
            5'b01101: C = A; // Copy A
            5'b01110: C = B; // Copy B
            default: C = 0; // Zero
            endcase
       end
       assign Z = C;
 endmodule